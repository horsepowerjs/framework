"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const cookie_1 = require("cookie");
const server_1 = require("@red5/server");
const storage_1 = require("@red5/storage");
const crypto = require("crypto");
const path = require("path");
class Session {
    constructor(client) {
        this.client = client;
        this._originalRecord = { id: null, creation: null, expires: null, csrf: '', cookie: { path: '/' }, items: [], flash: [] };
        this._store = 'file';
        this._started = false;
        this._record = this._originalRecord;
        this.client.session = this;
        let app = server_1.getConfig('app');
        let store = server_1.getConfig('storage');
        this._store = app.session && app.session.store ? app.session.store : 'file';
        this.store = store && store.disks && store.disks.session ? storage_1.Storage.mount('session') : storage_1.Storage.mount('tmp');
    }
    get file() { return path.join('red5', 'sessions', this._record.id + '.sess'); }
    get csrf() { return this._record.csrf || ''; }
    get id() { return this._record.id || ''; }
    get created() { return this._record.creation; }
    get items() { return Object.assign({}, this._record.items, this._record.flash); }
    /**
     * Starts an already active session or starts a new session
     *
     * @param {CookieSerializeOptions} options
     * @memberof Session
     */
    async start(options) {
        // Check if the session has already been started
        if (this._started)
            return;
        this._started = true;
        if (options)
            this._record.cookie = options;
        // Get the cookies
        let cookies = cookie_1.parse(this.client.request.headers.cookie || '');
        // Get the cookie sessid
        this._record.id = cookies.sessid || this._generateHash();
        let expires;
        if (options && options.expires instanceof Date) {
            expires = options && options.expires || undefined;
        }
        else if (options && typeof options.expires == 'number') {
            expires = new Date(Date.now() + options.expires);
        }
        if (this._store == 'file') {
            if (await this.store.exists(this.file)) {
                // A session with this id already exists, lets load it
                this._record = JSON.parse((await this.store.read(this.file)).toString());
                this._record.cookie.expires = expires;
                this._record.expires = expires;
            }
            else {
                // No session found start a new one
                this._record.creation = new Date;
                this._record.expires = this._record.cookie.expires;
                this._record.id = this._generateHash();
            }
        }
        if (!this._record.csrf)
            this.generateCSRF();
        this._record.flash.forEach(i => i.count++);
        this._setCookieHeader();
    }
    /**
     * Ends the current session and keeps the associated session data
     *
     * @memberof Session
     */
    async close() {
        // The session hasn't been started yet
        if (!this._started)
            return;
        // Remove the flashed items
        this._record.flash = this._record.flash.reduce((arr, itm) => itm.count > 0 ? arr : arr.concat(itm), []);
        await this._save();
        this._record = this._originalRecord;
        this._started = false;
    }
    /**
     * Ends the session and destroys the data associated with the session
     *
     * @async
     * @memberof Session
     */
    async destroy() {
        // The session hasn't been started yet
        if (!this._started)
            return;
        if (this._store == 'file') {
            await this.store.delete(this.file);
        }
        this._record = this._originalRecord;
        this._started = false;
        this._deleteCookieHeader();
    }
    /**
     * Regenerates the session id
     *
     * @memberof Session
     */
    async regenerateId() {
        let oldFile = this.file;
        this._record.id = this._generateHash();
        let newFile = this.file;
        if (this._store == 'file') {
            let isFile = await this.store.exists(oldFile);
            if (isFile) {
                // Rename the current session file to the new session file
                await this.store.move(oldFile, newFile);
                await this.store.write(newFile, JSON.stringify(this._record));
            }
        }
        // Set the new session id header
        this._setCookieHeader();
    }
    generateCSRF(length = 32) {
        this._record.csrf = crypto.randomBytes(length).toString('hex');
    }
    /**
     * Gets the value of a session key
     *
     * @param {string} key The key to lookup
     * @param {*} [fallback=''] The value to fallback to if the key isn't found
     * @returns
     * @memberof Session
     */
    get(key, fallback = '') {
        let item = this._record.items.find(i => i.key == key);
        if (!item) {
            let item = this._record.flash.find(i => i.key == key);
            if (item)
                return item.value;
            else
                return fallback;
        }
        return item.value;
    }
    /**
     * Gets the value of a flashed session key
     *
     * @param {string} key The key to lookup
     * @param {*} [fallback=''] The value to fallback to if the key isn't found
     * @returns
     * @memberof Session
     */
    flashed(key, fallback = '') {
        let item = this._record.flash.find(i => i.key == key);
        if (item)
            return item.value;
        else
            return fallback;
    }
    /**
     * Deletes an item from the session
     *
     * @param {string} key The item key
     * @returns
     * @memberof Session
     */
    delete(key) {
        let idx = this._record.items.findIndex(i => i.key == key);
        if (idx > -1)
            return this._record.items.splice(idx, 1).length > 0;
        return false;
    }
    /**
     * Sets a value or updates an existing one.
     *
     * @param {string} key The key to set
     * @param {*} value The value to set
     * @param {(Date | null)} [expires=null] The time the key expires, `null` to never expire
     * @returns
     * @memberof Session
     */
    set(key, value, expires = null) {
        let itm = this._record.items.find(i => i.key == key);
        if (itm)
            itm.value = value;
        else
            this._record.items.push({ key, value, expires });
        return this;
    }
    /**
     * Sets a value that is good till the end of the next request
     *
     * @param {string} key The key to set
     * @param {*} value The value to set
     * @returns
     * @memberof Session
     */
    flash(key, value) {
        let itm = this._record.flash.find(i => i.key == key);
        if (itm)
            itm.value = value;
        else
            this._record.flash.push({ key, value, count: 0 });
        return this;
    }
    /**
     * Gets the expiration date of the session
     *
     * @returns
     * @memberof Session
     */
    expiration() {
        return this._record.expires;
    }
    /**
     * Gets the expiration date of a session item
     *
     * @param {string} key
     * @returns
     * @memberof Session
     */
    itemExpiration(key) {
        let item = this._record.items.find(i => i.key == key);
        if (item)
            return item.expires;
        return null;
    }
    /**
     * Updates the expiration of the session
     *
     * @param {(Date | null)} date The new expiration date `null` to never expire
     * @memberof Session
     */
    increaseTTL(seconds) {
        let exp = this._record.expires ? this._record.expires.getTime() : new Date().getTime();
        this._record.expires = new Date(exp + (seconds * 1000));
        this._record.cookie.expires = this._record.expires;
        this._setCookieHeader();
        return this._record.expires;
    }
    /**
     * Updates the expiration of a session item
     *
     * @param {string} key The item key to update
     * @param {(Date | null)} date The new expiration date `null` to never expire
     * @returns
     * @memberof Session
     */
    increaseItemTTL(key, seconds) {
        let item = this._record.items.find(i => i.key == key);
        if (!item)
            return;
        let exp = item.expires ? item.expires.getTime() : new Date().getTime();
        item.expires = new Date(exp + (seconds * 1000));
        return item.expires;
    }
    async _save() {
        if (this._record.id && this._store == 'file') {
            return await this.store.write(this.file, JSON.stringify(this._record));
        }
        return false;
    }
    _generateHash() {
        let md5 = crypto.createHash('md5');
        let hash = md5.update((Math.random() * Number.MAX_SAFE_INTEGER).toString(36) + (Math.random() * Number.MAX_SAFE_INTEGER).toString(36) + (Math.random() * Number.MAX_SAFE_INTEGER).toString(36));
        return hash.digest('hex').toString();
    }
    _setCookieHeader() {
        this.client.response.setCookie('sessid', this._record.id || '', this._record.cookie);
    }
    _deleteCookieHeader() {
        let options = JSON.parse(JSON.stringify(this._record.cookie));
        options = Object.assign(options, { expires: new Date(0, 0, 0) });
        this.client.response.setCookie('sessid', this._record.id || '', options);
    }
}
exports.Session = Session;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
